import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
import plotly.graph_objs as go
import seaborn as seabornInstance 

%matplotlib inline

df1 = pd.read_csv('Admission_Predict.csv')
df2 = pd.read_csv('Admission_Predict_Ver1.1.csv')

frames = [df1, df2]

df = pd.concat(frames)


df=df.drop(['Serial No.'], axis = 1)
df


df.describe()

corrmat = df.corr()
fig = plt.figure(figsize = (12, 9))
sns.heatmap(corrmat, vmax = .8, square = True, annot = True)
plt.show()

color=['Orange', 'Yellow', 'Green', 'Blue', 'Purple', 'Violet', 'Pink']
cols = ['GRE Score', 'TOEFL Score', 'University Rating', 'SOP', 'LOR ', 'CGPA', 'Research']
cols1 = ['GRE Score', 'TOEFL Score', 'University Rating', 'SOP', 'LOR ', 'CGPA', 'Research', 'Chance of Admit ']


for i in cols:
    group1=df.groupby([i])['Chance of Admit '].count()
    lis=list(group1.index)
    data=[]
    x=0
    for j in lis:
        trace = go.Box(
            y=df[df[i]==j]['Chance of Admit '],
            name = j,
            marker = dict(
            color = color[x%7],
            )
        )
        x+=1
        data.append(trace)
        layout = dict(title = 'Chance of Admit vs '+i,
              yaxis= dict(title= 'Chance of Admit ',ticklen= 5,zeroline= False),
              xaxis= dict(title= i, ticklen= 5,zeroline= False)
             )
    fig = dict(data = data, layout = layout)
    pyoff.iplot(fig)
    
# import graph objects as "go"
import plotly.graph_objs as go
import plotly.offline as pyoff
# creating trace1
data =go.Scatter(
                    x = df['CGPA'],
                    y = df['Chance of Admit '],
                    mode = "markers",
                    name = "2014",
                    marker = dict(color = df['GRE Score'], showscale = True),
                    text = df['GRE Score']
                    )



layout = dict(title = 'GRE is Highlighted',
              yaxis= dict(title= 'Chance of Admit ',ticklen= 5,zeroline= False),
              xaxis= dict(title= 'CGPA',ticklen= 5,zeroline= False)
             )
fig = dict(data = data, layout = layout)
pyoff.iplot(fig)




x=0
for i in cols:
    plot_data = [
        go.Scatter(
            x=df[i],
            y=df['Chance of Admit '],
            mode = "markers",
            name=i,
            marker = dict(color = color[x])

            ),
        go.Scatter(
            x=query1[i],
            y=query1['Chance of Admit '],
            mode = "markers",
            name='> 75% Chance',
            marker = dict(color = 'Red')

            ),

    ]
    plot_layout = go.Layout(
            #title=i,
            yaxis_title='Chance of Admit ',
            xaxis_title=i
        )
    fig = go.Figure(data=plot_data, layout=plot_layout)
    pyoff.iplot(fig)
    x+=1
